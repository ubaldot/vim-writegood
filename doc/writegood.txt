*writegood.txt*                         Check your English prose with Vim.

         _                               _ _                             _ ~
        (_)                             (_) |                           | |~
  __   ___ _ __ ___ ________      ___ __ _| |_ ___  __ _  ___   ___   __| |~
  \ \ / / | '_ ` _ \______\ \ /\ / / '__| | __/ _ \/ _` |/ _ \ / _ \ / _` |~
   \ V /| | | | | | |      \ V  V /| |  | | ||  __/ (_| | (_) | (_) | (_| |~
    \_/ |_|_| |_| |_|       \_/\_/ |_|  |_|\__\___|\__, |\___/ \___/ \__,_|~
                                                    __/ |                  ~
                                                   |___/                   ~

==============================================================================
CONTENTS                                                *WritegoodContents*

    1. Introduction ................. |WritegoodIntroduction|
    2. Requirements ................. |WritegoodRequirements|
    3. Usage ........................ |WritegoodUsage|
    4. Configuration ................ |WritegoodConfiguration|
    5. Limitations .................. |WritegoodLimitations|
    6. Contributing ................. |WritegoodContributing|
    7. License ...................... |WritegoodLicense|


==============================================================================
INTRODUCTION                                          *WritegoodIntroduction*

Vim-writegood naively check your English prose.

It is nothing but a simple Vim9 wrapper around
[write-good](https://github.com/btford/write-good) and
[vale](https://vale.sh). You choose which one you want to use.

==============================================================================
REQUIREMENTS                                         *WritegoodRequirements*

You must have [write-good](https://github.com/btford/write-good) and/or
[vale](https://vale.sh) installed and configured and you need Vim9.

==============================================================================
USAGE                                                     *WritegoodUsage*

Vim-writegood has only one command:

>
    :WriteGoodToggle
<

which is used to turn on and off the linter.

The diagnostic messages are stored in the |quickfix| list and displayed in the
command-line.
You can use all the |quickfix| list features such as |:cnext|,
|:cprev|, |:copen|, etc. to conveniently move around.

The |quickfix| list automatically updates  "on save", i.e.  you must save your
file to refresh the linting otherwise you won't see your problems to
disappear.

**Warning**
 When you change (or come back to a previous) buffer, you have to manually
 re-enable the linting. Don't be fooled if the highlight is still on!
 To fix it, run :WriteGoodToggle once or twice, that's all.

==============================================================================
CONFIGURATION                                        *WritegoodConfiguration*


                                                    *g:writegood_compiler*
Type: "writegood" or "vale"
Default: "writegood"

Linter to be used.

                                                        *g:writegood_options*
Type: 'string'
Default: ""

Options to append write-good call. See write-good docs for more info.


                                                         *g:writegood_linehl*
Type: 'highlight'
Default: "CursorLine"

Highlight group used for the whole line the sign is placed in.

                                                        *g:writegood_text*
Type: 'string'
Default: "--"
text that is displayed when there is no icon or the GUI is not being used.

                                                      *g:writegood_texthl*
Type: 'highlight'
Default: ""

Highlight group used for the text item.

To figure out the meaning of the latter three parameters, check
|sign_define()| and to figure out possible values check 'highlight'.

==============================================================================
LIMITATIONS                                         *WritegoodLimitations*

When you change (or come back to a previous) buffer, you have to manually
re-enable the linting by running |:WriteGoodToggle| once or twice and
everything will come back to work perfectly fine.

This is due because the quickfix list is not updated automatically when you
change buffer. Using location lists won't help because they are tied to a
window, not to a buffer. Calling TurnOff() when you leave the buffer won't
work either because if you jump into the quickfix list you would lose
everything (and that is not what you want). A solution would be to specify a
BufEnter autocmd based on selected filetypes, but I really don't like the idea
of listing a plethora of files where this kind of linting can be useful.

==============================================================================
CONTRIBUTING                                         *WritegoodContributing*

There is room for optimization and robustification, feel free to send a PR
if have any improvement ideas.

==============================================================================
LICENSE                                                *WritegoodLicense*

BSD 3-Clause License

Copyright (c) 2023, Ubaldo Tiberi.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
