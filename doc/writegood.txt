*writegood.txt*                         Check your English prose with Vim.

         _                               _ _                             _ ~
        (_)                             (_) |                           | |~
  __   ___ _ __ ___ ________      ___ __ _| |_ ___  __ _  ___   ___   __| |~
  \ \ / / | '_ ` _ \______\ \ /\ / / '__| | __/ _ \/ _` |/ _ \ / _ \ / _` |~
   \ V /| | | | | | |      \ V  V /| |  | | ||  __/ (_| | (_) | (_) | (_| |~
    \_/ |_|_| |_| |_|       \_/\_/ |_|  |_|\__\___|\__, |\___/ \___/ \__,_|~
                                                    __/ |                  ~
                                                   |___/                   ~

==============================================================================
CONTENTS                                                *WritegoodContents*

    1. Introduction ................. |WritegoodIntroduction|
    2. Requirements ................. |WritegoodRequirements|
    3. Usage ........................ |WritegoodUsage|
    4. Configuration ................ |WritegoodConfiguration|
    5. Limitations .................. |WritegoodLimitations|
    6. Contributing ................. |WritegoodContributing|
    7. License ...................... |WritegoodLicense|


==============================================================================
INTRODUCTION                                          *WritegoodIntroduction*

Vim-writegood naively check your English prose.

It is nothing but a simple Vim9 wrapper around
[write-good](https://github.com/btford/write-good) and
[vale](https://vale.sh). You choose which one you want to use.

==============================================================================
REQUIREMENTS                                         *WritegoodRequirements*

You must have [write-good](https://github.com/btford/write-good) and/or
[vale](https://vale.sh) installed and configured and you need Vim9.

==============================================================================
USAGE                                                     *WritegoodUsage*

Vim-writegood has one command:
>
    :WriteGoodToggle
<
diagnostic messages are placed in the |quickfix| list and are also displayed in
the command-line.

Given that the messages end up in the |quickfix| list, you can use all the
|quickfix| list functions, including |:copen|, |:cnext|, |:cprev|, etc.

**Warning**
 When you change (or come back to a previous) buffer, you have to manually
 re-enable the linting, don't be fooled if the highlight is still on!
 To  do that, all you have to do is to run :WriteGoodToggle once or
 twice and everything will come back to work perfectly fine. Nothing special.
 I hope that such an action won't bother you too much. :)

==============================================================================
CONFIGURATION                                        *WritegoodConfiguration*


                                                    *g:writegood_compiler*
Type: "writegood" or "vale"
Default: "writegood"

Linter to be used.

                                                        *g:writegood_options*
Type: 'string'
Default: ""

Options to append write-good call. See write-good docs for more info.


                                                         *g:writegood_linehl*
Type: 'highlight'
Default: "CursorLine"

Highlight group used for the whole line the sign is placed in.

                                                        *g:writegood_text*
Type: 'string'
Default: "--"
text that is displayed when there is no icon or the GUI is not being used.

                                                      *g:writegood_texthl*
Type: 'highlight'
Default: ""

Highlight group used for the text item.

To figure out the meaning of the latter three parameters, check
|sign_define()| and to figure out possible values check 'highlight'.

==============================================================================
LIMITATIONS                                         *WritegoodLimitations*

When you change (or come back to a previous) buffer, you have to manually
re-enable the linting by running |:WriteGoodToggle| once or twice and
everything will come back to work perfectly fine.

This is due because the quickfix list is not updated automatically when you
change buffer. Using location lists won't help because they are tied to a
window, not to a buffer. Calling TurnOff() when you leave the buffer won't
work either because if you jump into the quickfix list you would lose
everything (and that is not what you want). A solution would be to specify a
BufEnter autocmd based on selected filetypes, but I really don't like the idea
of listing a plethora of files where this kind of linting can be useful.

==============================================================================
CONTRIBUTING                                         *WritegoodContributing*

There is room for optimization and robustification, feel free to send a PR
if have any improvement ideas.

==============================================================================
LICENSE                                                *WritegoodLicense*
Same as Vim.
